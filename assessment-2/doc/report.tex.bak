\documentclass[oneside]{article}
\usepackage{fancyhdr}
\usepackage{graphicx}
\usepackage{float}
\usepackage{enumitem}
\pagestyle{fancy}
\title{Parallel Design Patterns II}
\author{B138813}
\date{February 2019}

\begin{document}
\lhead{Parallel Design Patterns II}
\rhead{B138813}

\maketitle
\section{Introduction}
We present our report for the second submission of the Parallel Design Patterns Coursework. We first discuss our implementation in Section~\ref{sec:imp}, and demonstrate its correctness in Section~\ref{sec:cor}. Although our implementation has some features similar to a framework, we were not able to succesfully seperate policy and mechanism to an adaquete extend. We will discuss this issue further in Section~\ref{sec:fur}.



\section{Implementation}\label{sec:imp}
We implemented our squirrel simulation in C++. We present a UML diagram of our implementation in Figure~\ref{fig:uml}. To maximise code re-use, we abstracted as much common functionality into the parent actor class as possible. The actor class holds methods such as \texttt{send\_msg()} and \texttt{msg\_recv()} which act as wrappers to MPI functions, whilst also providing extra functionality. For example, \texttt{msg\_recv()} returns a three item tuple, which contains:

\begin{itemize}
  \item A boolean, which indicates if the message was succesfully recieved.
  \item An integer, which indicates where the message was recived from.
  \item An integer, which is the message itself.
\end{itemize}
The semantics of the message integer are encoded into the \texttt{MSG} enum, which is shared by all actors. This standardisation makes it easy for the programmer to reason about messages, allowing them to dictate how a message if handled in each child class's main event loop. The function \texttt{send\_msg()} is simple convenience wrapper around \texttt{MPI\_Bsend()}. Each class inherits directly from the actor class, except for the controller, which is a child of the master class. We made this decision because the master and controller share most of their functionality and variables. The master class starts the simulation, and then provides process pool functionality. The controller class keeps track of the number of live and infected squirrels. It also mediates the birth of squirrels after the master has set up the simulation. There is only ever one controller and one master.

\begin{figure}[H]
  \includegraphics[width=\linewidth]{figures/pdp_uml}
  \caption{UML Diagram of the Program}
  \label{fig:uml}
\end{figure}

 Both classes need to know the simulation's initial squirrel numbers, and share functions and values to implement this. If C++'s inheritance model did not allow both child and grandchild classes to implement their own versions their parent's virtual functions, this pattern would not be possible. The squirrel class has the most functions of any class, partly because of how active the biologists model demands the squirrel to be, and partly because of how we have decided to model our actors.

 Each actor has an actor type, as designated by the enumerate type \texttt{actor\_type}. There three different actor type for squirrels; infected squirrels, dead squirrels and normal, healthy squirrels. To safely change a squirrel from one of these types to another, we thought it best to encapsulate the code within a function. In doing so, we keep our code compliant with object oriented design philosophies, but diverge from high performance programming ones. However, we do not think the addition of these functions degrades the performance of our work too much, and improves the readablity of our code.

 There are four key communications between our actors. We have endevored to abstract them and encapulate them into our actor class. We will now describe our implementations of those actors. It is important to note that we never use blocking sends. If we want to be sure that a certain actor receives a message before it continues, we use a blocking receive. If otherwise stated, all receives are non blocking.

 \subsection{Actor Start}
 Every actor except master enters into the worker code function and calls \texttt{start\_up()}, where the actor uses a blocking recieve to get what type of actor it is from the master. Once the actor has recieved its type, it can begin to execute its \texttt{run()} function, where its behavior is encapsulated in a \texttt{while(active)} loop. It is important that the grid cells and the controller are created in the order that they are, as communication is reliant up their ranks being between 1 and 16 for squirrels, and exactly 17 for the controller. Squirrels, unlike all other actors, must use one more blocking recive before entering this loop, which we will go onto explain in the next section.
\subsection{Squirrel Birth}
Before a squirrel can enter its \texttt{while(active)} it must first be assigned its co-ordinates. This therefore means that the squirrel must use a blocking recieve to gather its co-ordinates from either the master, or the controller, depending on which actor started it.

When a squirrel gives birth to another squirrel it sends a message to the controller to inform it
\subsection{Squirrel Step}
Every time a squirrel steps into a grid cell, each must exchange key statistics about infection and population. To ensure that a squirrel has stepped into a grid cell and succesfully retrieved data from it, the squirrel's \texttt{step()} function returns a boolean indicating if the squirrel recieved the population influx and infection level from the grid cell. If the returned boolean is false, then the squirrel does not carry out the rest of its functionality, because its most recent value for a cell's population influx and infection level would be inacurrate. The biologist's model mandates a strong relationship between the squirrel and the enviroment, so we must remain faithful to that.

A grid cell's side of this communication is much simpler, only incrementing its population count or population and infection count when a squirrel sends a respective step or infection step.
\subsection{Clock tick}
We have made use of a clock actor to send messages to every grid cell each month, modelled as a period of 0.05 seconds. We refer to this time period message as a tick. Both the grid cell and the controller's \texttt{run()} receive tick messages. When the grid cell receives a tick, it updates its population influx and infection level in accordance with the biologist's model. Although a grid cell does not have a particulalry long history of population or infection counts, we have decided to model the history as a FIFO deque. This allows us to use familliar pop back and push front conventions to maintain the size of the history. Although this is perhaps not the most performant way to manage the history of the of the grid cells, we hope that it's familiarity makes it easier to maintain. We also use the same method to manage the squirrels infection level and recent population history.

If the controller recieves a message from the clock it prints out the current number of live squirrels and the number of dead squirrels.

\section{Correctness}\label{sec:cor}
Although our we embrace the chaotic nature of the actor pattern and the model we are simulating, we can still demonstrate the correctness of our implementation. For example, if there are no infected squirrels at the start of the simulation, then the number of squirrels will reach 200 and force the simulation to end. Simililarly, if we set the number of infected squirrels to be 
\subsection{Issues}
Our solution is not portable and is not production ready. When there are a high number of live squirrels, the controller actor is too busy to recieve clock ticks.

\section{Further Work}\label{sec:fur}
Further generalise data recv or make a blocking data recv for location vector.

\end{document}
